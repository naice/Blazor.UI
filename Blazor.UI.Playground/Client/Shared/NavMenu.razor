<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Blazor.UI.Playground</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @foreach (var navItem in AutoNavMenuPages)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="@navItem.route.Template">
                    <span class="@navItem.nav.IconCSS" aria-hidden="true"></span> @navItem.nav.Text
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private IEnumerable<(RouteAttribute route, NavMenuPageAttribute nav)> AutoNavMenuPages =>
        typeof(NavMenuPageAttribute).Assembly
            .GetTypes()
            .Where(t => t.GetCustomAttributes(false).Any(attr => attr is NavMenuPageAttribute))
            .Select(t =>
            {
                var attribs = t.GetCustomAttributes(false);
                var nav = attribs.FirstOrDefault(x => x is NavMenuPageAttribute) as NavMenuPageAttribute
                    ?? throw new InvalidOperationException();
                var route = attribs.FirstOrDefault(x => x is RouteAttribute) as RouteAttribute
                    ?? throw new InvalidOperationException($"Route missing on {t.FullName}.");
                return (route, nav);
            });

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
